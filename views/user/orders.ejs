<%- include('../partials/user/header') %>

<link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
<!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> -->

<style>
 .card-green {
   background-color: #ADD8E6;
 }
 .main {
   padding: 30px 0;
 }

 .dashboard-menu {
   background-color: #cce3e6;
   border-radius: 10px;
   padding: 15px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
 }

 .dashboard-menu .nav-link {
   font-weight: bold;
   color: #30683c;
   box-shadow: 0 4px 10px rgba(123, 131, 112, 0.3), 0 4px 20px rgba(0, 191, 255, 0.2);
   transition: box-shadow 0.3s ease;
 }

 .dashboard-menu .nav-link:hover {
   color: #00bfff;
   box-shadow: 0 4px 15px rgba(173, 255, 47, 0.5), 0 6px 25px rgba(0, 191, 255, 0.4);
 }

 .card {
   border-radius: 10px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
   margin-bottom: 20px;
 }

 .card-header {
   background-color: #487379;
   color: white;
   border-radius: 10px 10px 0 0;
 }

 .profile-image-container {
   display: flex;
   align-items: center;
 }

 .rounded-circle {
   border-radius: 50%;
   border: 2px solid #fff;
   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
 }

 .ml-3 {
   margin-left: 15px;
 }

 @media (max-width: 768px) {
   .dashboard-menu {
     padding: 10px;
   }
   .card {
     margin-bottom: 15px;
   }
 }
 body {
            background-color: #f7f7f7;
        }
        .sidebar {
            background-color: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .sidebar a {
            color: #333;
            display: block;
            padding: 10px 0;
            text-decoration: none;
        }
        .sidebar a.active {
            color: #ff6600;
        }
        .sidebar a:hover {
            color: #ff6600;
        }
        .sidebar a i {
            margin-right: 10px;
        }
        .main-content {
            background-color: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .main-content h2 {
            margin-bottom: 20px;
        }
        .form-group label {
            font-weight: bold;
        }
        .form-group span {
            color: red;
        }
        .btn-orange {
            background-color: #ff6600;
            color: white;
        }
        .btn-orange:hover {
            background-color: #e65c00;
        }
        .btn-blue {
            background-color: #0000ff;
            color: white;
        }
        .btn-blue:hover {
            background-color: #0000cc;
        }
        .photo img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .order-header {
            background-color: #f0f0f0;
            padding: 10px;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
        }
        .order-body {
            padding: 20px;
        }
        .order-footer {
            padding: 10px;
            border-bottom-left-radius: 5px;
            border-bottom-right-radius: 5px;
        }
        .order-card {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .order-status {
            color: red;
        }
        .order-ship-to {
            color: green;
        }
        .order-link {
            color: blue;
            text-decoration: none;
        }
        .order-link:hover {
            text-decoration: underline;
        }
        .btn-orange {
            background-color: orange;
            color: white;
        }
        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
        }
</style>



<div class="container mt-5">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3 sidebar">
            <h2>My Account</h2>
            <a href="/userProfile"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person" viewBox="0 0 16 16">
                <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z"/>
            </svg> Account Details</a>
            <a href="/address"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt" viewBox="0 0 16 16">
                <path d="M12.166 8.94c-.524 1.062-1.234 2.12-1.96 3.07A32 32 0 0 1 8 14.58a32 32 0 0 1-2.206-2.57c-.726-.95-1.436-2.008-1.96-3.07C3.304 7.867 3 6.862 3 6a5 5 0 0 1 10 0c0 .862-.305 1.867-.834 2.94M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10"/>
                <path d="M8 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4m0 1a3 3 0 0 0 0-6 3 3 0 0 0 0 6"/>
            </svg> Address</a>
            <a href="/orders" class="active"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cart2" viewBox="0 0 16 16">
                <path d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5M3.14 5l1.25 5h8.22l1.25-5zM5 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2m-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0m9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2m-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0"/>
            </svg> Orders</a>
            <a href="/wishlist"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heart" viewBox="0 0 16 16">
                <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143q.09.083.176.171a3 3 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15"/>
            </svg> Wishlist</a>
            <a href="mycoupons"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cash" viewBox="0 0 16 16">
                    <path d="M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4"/>
                    <path d="M0 4a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V6a2 2 0 0 1-2-2z"/>
                  </svg> My Coupons</a>
            
            <a href="#" onclick="confirmLogout(event)" class="text-danger mt-4"><i class="fas fa-sign-out-alt"></i> Logout</a>
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <h2 class="mb-4">My Orders</h2>
            <form action="" method="get" class="d-inline">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px;">
            <input type="text" class="form-control border-0 rounded-pill" placeholder="Search orders" name="search">
            <button class="btn  border-0" type="submit">Search</button>
        </div>
    </form>
            <% if (orders && orders.length > 0) { %>
                <% orders.forEach(order => { %>
                    <div class="order-card">
                        <div class="order-header">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <small class="text-muted">ORDER PLACED</small><br>
                                    <%= new Date(order.createdOn).toLocaleDateString() %>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">TOTAL</small><br>
                                    â‚¹<%= Math.round(order.finalAmount) %>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">ORDER ID</small><br>
                                    #<%= order.orderId %>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">ORDER STATUS</small><br>
                                    <span class="status-badge <%= 
                                        order.status === 'Delivered' ? 'bg-success' :
                                        order.status === 'Cancelled' ? 'bg-danger' :
                                        order.status === 'Shipped' ? 'bg-info' :
                                        'bg-warning'
                                    %>">
                                        <%= order.status.toUpperCase() %>
                                           
                                    </span>
                                    <%if(order.status === 'Delivered'){%>
                                        On
                                        <%=new Date(order.deliveredOn).toLocaleDateString()%>
                                    <%}%> 
                                    <%if(order.status === 'Returned'){%>
                                        On
                                        <%=new Date(order.updatedOn).toLocaleDateString()%>
                                    <%}%>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">PAYMENT METHOD</small><br>
                                    <% if (order.paymentMethod === 'cod') { %>
                                        CASH ON DELIVERY
                                    <% } else if (order.paymentMethod === 'online') { %>
                                        ONLINE PAYMENT
                                    <% } else if (order.paymentMethod === 'wallet') { %>
                                        WALLET PAYMENT
                                    <% } else { %>
                                        UNKNOWN PAYMENT METHOD
                                    <% } %>
                                </div>
                            </div>
                        </div>
                        
                        <div class="order-body">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <img src="uploads/re-image/<%= order.orderedItems[0].productImages[0] %>" 
                                         alt="<%= order.orderedItems[0].productName %>"
                                         class="product-image">
                                </div>
                                <div class="col-md-6">
                                    <a href="/productDetails?id=<%= order.orderedItems[0].product %>">
                                        <h5><%= order.orderedItems[0].productName %></h5>
                                    </a>
                                    <p class="text-muted mb-0">Quantity: <%= order.orderedItems[0].quantity %></p>
                                    <p class="text-muted">Price: â‚¹<%= Math.round(order.totalPrice)/order.orderedItems[0].quantity %></p>
                                </div>
                                
                                <div class="col-md-4 text-end">
                                    <a href="/order-details?orderId=<%= order.orderId %>" 
                                       class="btn btn-outline-primary btn-sm">View Details</a>
                                    
                                    <% if (order.status === 'Delivered' && !order.returnReason && order.requestStatus !== "rejected") { %>
                                        <button onclick="initiateReturn('<%= order._id %>')" 
                                                class="btn btn-warning btn-sm mt-2">
                                            Request Return
                                        </button>
                                    
                                    <% } else if (!['Delivered', 'Cancelled', 'Return Requested', 'Returning', 'Returned'].includes(order.status)) { %>
                                        <button onclick="cancelOrder('<%= order._id %>')"
                                                class="btn btn-outline-danger btn-sm mt-2">
                                            Cancel Order
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="fas fa-shopping-bag fa-3x text-muted"></i>
                    </div>
                    <h3>No orders yet</h3>
                    <p class="text-muted">When you place an order, it will appear here.</p>
                    <a href="/shop" class="btn btn-primary mt-3">Start Shopping</a>
                </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Return Modal -->
<div class="modal fade" id="returnModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <div class="mb-3">
                        <label class="form-label">Return Reason Category</label>
                        <select class="form-select" id="returnReason" required>
                            <option value="">Select a reason</option>
                            <option value="Wrong size">Wrong size</option>
                            <option value="Damaged product">Damaged product</option>
                            <option value="Not as described">Not as described</option>
                            <option value="Quality issues">Quality issues</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Detailed Description</label>
                        <textarea class="form-control" id="returnDescription" rows="3" placeholder="Please provide more details about your return reason..." required></textarea>
                        <small class="text-muted">Please explain the issue in detail to help us better understand your return request.</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitReturn()">Submit Return Request</button>
            </div>
        </div>
    </div>
</div>

<!-- SweetAlert2 for dialogs -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
let currentOrderId = null;

function initiateReturn(orderId) {
    currentOrderId = orderId;
    const modal = new bootstrap.Modal(document.getElementById('returnModal'));
    modal.show();
}

document.getElementById('returnReason').addEventListener('change', function() {
    const otherReasonDiv = document.getElementById('otherReasonDiv');
    if (this.value === 'Other') {
        otherReasonDiv?.classList.remove('d-none');
    } else {
        otherReasonDiv?.classList.add('d-none');
    }
});

async function submitReturn() {
    try {
        const reasonSelect = document.getElementById('returnReason');
        const returnDescription = document.getElementById('returnDescription');
        
        
        const returnReason = reasonSelect.value;
        const description = returnDescription.value;

        if (!returnReason || !description) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Please select a reason category and provide a detailed description!',
            });
            return;
        }

        

        const response = await fetch('/orders/return', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                returnReason,
                returnDescription: description
            })
        });


        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Return request submitted successfully!',
                confirmButtonText: 'OK'
            }).then(() => {
                location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Failed to submit return request',
        });
    }
}

async function cancelReturn(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Return Request',
            text: 'Are you sure you want to cancel your return request?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (result.isConfirmed) {
            const response = await fetch('/orders/cancel-return', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return request cancelled successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to cancel return request'
        });
    }
}

async function cancelOrder(orderId) {
    const { value: reasonOption } = await Swal.fire({
        title: 'Cancel Order',
        input: 'select',
        inputLabel: 'Select a reason for cancellation',
        inputOptions: {
            'Ordered by mistake': 'Ordered by mistake',
            'Found a better price': 'Found a better price',
            'Delivery took too long': 'Delivery took too long',
            'Item no longer needed': 'Item no longer needed',
            'Changed my mind': 'Changed my mind',
            'Wrong item ordered': 'Wrong item ordered',
            'Other': 'Other'
        },
        showCancelButton: true
    });

    if (!reasonOption) return;

    let finalReason = reasonOption;

    if (reasonOption === 'Other') {
        const { value: otherReason } = await Swal.fire({
            title: 'Cancel Order',
            input: 'textarea',
            inputLabel: 'Please provide a reason for cancellation',
            inputPlaceholder: 'Type your reason here...',
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to provide a reason!';
                }
            }
        });

        if (!otherReason) return;
        finalReason = otherReason;
    }

    try {
        const response = await fetch('/orders/cancel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, reason: finalReason }),
        });

        const data = await response.json();

        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Order cancelled successfully',
                timer: 1500
            });
            location.reload();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to cancel order'
        });
    }
}

function confirmLogout(event) {
    event.preventDefault();
    Swal.fire({
        title: "Are you sure?",
        text: "You will be logged out!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, Logout"
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = "/logout";
        }
    });
}
</script>

<%- include('../partials/user/footer') %>